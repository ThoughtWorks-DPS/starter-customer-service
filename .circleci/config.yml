version: 2

defaults: &defaults
  working_directory: ~/project
  environment:
    JVM_OPTS: -Xmx3200m
    TERM: dumb
    JAVA_CONTAINER: circleci/openjdk:8-jdk
    INFRA_CONTAINER: quay.io/thoughtworks_aelab/di-circleci-platform-agent:latest
    GCLOUD_PROJECT_ID: twdps-k8-starter
    GKE_CLUSTER_NAME: k8startercluster
exports: &exports
  - run: |
      SERVICE_VERSION=`grep 'version' gradle.properties|cut -d'=' -f2`
      DOCKER_TAG=${SERVICE_VERSION}-${CIRCLE_BUILD_NUM}
      echo "export SERVICE_VERSION=$SERVICE_VERSION" >> $BASH_ENV
      echo "export DOCKER_TAG=$DOCKER_TAG" >> $BASH_ENV

setup_infra: &setup_infra
  - run: |
      k8/create-gcloud-kubectl-context.sh
      docker login -u="$DOCKER_USER" -p="$QUAY_TOKEN" quay.io

jobs:
  build-jar:
    <<: *defaults
    docker:
      # specify the version you desire here
#      - image: circleci/openjdk:8-jdk
      - image: $JAVA_CONTAINER

    steps:
      - checkout
#      - <<: *exports
      - attach_workspace:
          at: ~/project
      # IMPORTANT - circleci needs the AWS credentials setup correctly
      # with a user that can access the s3 bucket used for the maven dependencies

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: ./gradlew build
      - run: echo 'export DOCKER_TAG="`grep 'version' gradle.properties|cut -d'=' -f2`-$CIRCLE_BUILD_NUM"' >> $BASH_ENV
      # since we made the Dockerfile easy to work with locally with Gradle we need to set the
      # JAR_FILE arg in the docker build command

      - persist_to_workspace:
          root: .
          paths:
            - gradle.properties
            - build/libs
            - Dockerfile
            - k8
            - gcloud-secret

  build-docker:
    <<: *defaults

    docker:
      - image: $INFRA_CONTAINER
        auth:
          username: $DOCKER_USER
          password: $QUAY_TOKEN

    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/project
      - <<: *exports
      - <<: *setup_infra

      # since we made the Dockerfile easy to work with locally with Gradle we need to set the
      # JAR_FILE arg in the docker build command
      - run: docker build --build-arg JAR_FILE=build/libs/customerservice-lastest.jar -t quay.io/thoughtworks_aelab/customerservice:$DOCKER_TAG .
      - run: docker push quay.io/thoughtworks_aelab/customerservice:$DOCKER_TAG
#      - persist_to_workspace:
#          root: .
#          paths:
#            - shared_env

  deploy-service:
    <<: *defaults

    docker:
      - image: $INFRA_CONTAINER
        auth:
          username: $DOCKER_USER
          password: $QUAY_TOKEN

    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/project
      - <<: *exports
      - <<: *setup_infra

      # setup final deployment file

      - run: sed "s/{DOCKER_TAG}/$DOCKER_TAG/" k8/customerservice-template.yaml | sed "s/{VERSION}/$SERVICE_VERSION/" > k8/customerservice-final.yaml
      - run: cat k8/customerservice-final.yaml
      # deploy
      - run: kubectl apply -f k8/customerservice-final.yaml


workflows:
  version: 2

  btd:
    jobs:
      - build-jar
      - build-docker:
          requires:
            - build-jar
      - deploy-service:
          requires:
            - build-docker