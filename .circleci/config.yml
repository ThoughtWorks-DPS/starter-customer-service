version: 2
jobs:
  build-jar:
    docker:
      # specify the version you desire here
#      - image: circleci/openjdk:8-jdk
      - image: circleci/openjdk:8-jdk

    working_directory: ~/project

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      # IMPORTANT - circleci needs the AWS credentials setup correctly
      # with a user that can access the s3 bucket used for the maven dependencies

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: ./gradlew build
      - run: echo 'export DOCKER_TAG="`grep 'version' gradle.properties|cut -d'=' -f2`-$CIRCLE_BUILD_NUM"' >> $BASH_ENV
      # since we made the Dockerfile easy to work with locally with Gradle we need to set the
      # JAR_FILE arg in the docker build command

      - persist_to_workspace:
          root: .
          paths:
            - gradle.properties
            - build/libs
            - Dockerfile
            - k8
            - gcloud-secret

  build-docker:
    docker:
      - image: quay.io/thoughtworks_aelab/di-circleci-platform-agent:latest
        auth:
          username: $DOCKER_USER
          password: $QUAY_TOKEN
    working_directory: ~/project

    steps:
      - attach_workspace:
          at: ~/project
    # don't forget this step :-) Or you will not have a running docker daemon in you
    # build agent, DAMHIKT!
      - setup_remote_docker

      - run: openssl aes-256-cbc -d -in gcloud-secret -k $KEY > gcloud-service-account.json

      - run: gcloud auth activate-service-account k8starter-cluster-dev-admin@twdps-k8-starter.iam.gserviceaccount.com --key-file=gcloud-service-account.json
      - run: rm -f gcloud-service-account.json
      - run: gcloud components install beta --quiet
    # decrypt the gcloud secret and set the kubectl context
      - run: k8/create-kubectl-context.sh

    # docker login
      - run: docker login -u="$DOCKER_USER" -p="$QUAY_TOKEN" quay.io

      - run: echo "export SERVICE_VERSION=`grep 'version' gradle.properties|cut -d'=' -f2`" >> $BASH_ENV
      - run: echo "export DOCKER_TAG=$SERVICE_VERSION-$CIRCLE_BUILD_NUM" >> $BASH_ENV
      # since we made the Dockerfile easy to work with locally with Gradle we need to set the
      # JAR_FILE arg in the docker build command
      - run: docker build --build-arg JAR_FILE=build/libs/customerservice-lastest.jar -t quay.io/thoughtworks_aelab/customerservice:$DOCKER_TAG .
      - run: docker push quay.io/thoughtworks_aelab/customerservice:$DOCKER_TAG
      # setup final deployment file
      - run: sed "s/\<DOCKER_TAG\>/$DOCKER_TAG/" k8/customerservice.yaml | sed "s/\<VERSION\>/$SERVICE_VERSION/" > k8/customerservice-final.yaml
      - run: cat k8/customerservice-final.yaml
      # deploy
      - run: kubectl apply -f k8/customerservice-final.yaml

workflows:
  version: 2

  btd:
    jobs:
      - build-jar
      - build-docker:
          requires:
            - build-jar